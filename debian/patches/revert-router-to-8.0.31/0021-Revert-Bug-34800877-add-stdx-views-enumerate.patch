From 10431d181b5d365d431cb95a6773ffa45b9d7227 Mon Sep 17 00:00:00 2001
From: Corey Bryant <corey.bryant@canonical.com>
Date: Fri, 27 Jan 2023 17:04:34 -0500
Subject: [PATCH 21/86] Revert "Bug#34800877 add stdx::views::enumerate()"

This reverts commit 75d3e8d2e5c4b384a3048248fccf5b9ba6af57aa.
---
 .../include/mysql/harness/stdx/iterator.h     | 139 ----------------
 .../include/mysql/harness/stdx/ranges.h       | 150 ------------------
 router/src/harness/tests/CMakeLists.txt       |   3 +-
 router/src/harness/tests/test_stdx_ranges.cc  | 113 -------------
 4 files changed, 1 insertion(+), 404 deletions(-)
 delete mode 100644 router/src/harness/include/mysql/harness/stdx/iterator.h
 delete mode 100644 router/src/harness/include/mysql/harness/stdx/ranges.h
 delete mode 100644 router/src/harness/tests/test_stdx_ranges.cc

diff --git a/router/src/harness/include/mysql/harness/stdx/iterator.h b/router/src/harness/include/mysql/harness/stdx/iterator.h
deleted file mode 100644
index dcf91cbfe6c..00000000000
--- a/router/src/harness/include/mysql/harness/stdx/iterator.h
+++ /dev/null
@@ -1,139 +0,0 @@
-/*
-  Copyright (c) 2022, Oracle and/or its affiliates.
-
-  This program is free software; you can redistribute it and/or modify
-  it under the terms of the GNU General Public License, version 2.0,
-  as published by the Free Software Foundation.
-
-  This program is also distributed with certain software (including
-  but not limited to OpenSSL) that is licensed under separate terms,
-  as designated in a particular file or component or in included license
-  documentation.  The authors of MySQL hereby grant you an additional
-  permission to link the program and your derivative works with the
-  separately licensed software that they have included with MySQL.
-
-  This program is distributed in the hope that it will be useful,
-  but WITHOUT ANY WARRANTY; without even the implied warranty of
-  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-  GNU General Public License for more details.
-
-  You should have received a copy of the GNU General Public License
-  along with this program; if not, write to the Free Software
-  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-*/
-
-#ifndef MYSQL_HARNESS_STDX_ITERATOR_H_
-#define MYSQL_HARNESS_STDX_ITERATOR_H_
-
-#include <type_traits>
-
-#include "mysql/harness/stdx/type_traits.h"  // remove_cvref_t
-
-// from C++20
-
-namespace stdx {
-namespace impl {
-template <class T, bool = std::is_array_v<T>>
-struct indirectly_readable_traits_array;
-
-template <class T>
-struct indirectly_readable_traits_array<T, true> {
-  using value_type = std::remove_cv_t<std::remove_extent_t<T>>;
-};
-
-template <class T, bool = std::is_object_v<T>>
-struct indirectly_readable_traits_pointer {};
-
-template <class T>
-struct indirectly_readable_traits_pointer<T, true> {
-  using value_type = std::remove_cv_t<T>;
-};
-
-template <class T, typename = std::void_t<>>
-struct has_value_type : std::false_type {};
-
-template <class T>
-struct has_value_type<T,
-                      std::void_t<typename stdx::remove_cvref_t<T>::value_type>>
-    : std::true_type {};
-
-template <class T, bool = has_value_type<T>::value>
-struct indirectly_readable_traits_member_value_type;
-
-template <class T>
-struct indirectly_readable_traits_member_value_type<T, true> {
-  using value_type = typename T::value_type;
-};
-
-template <class T, typename = std::void_t<>>
-struct has_element_type : std::false_type {};
-
-template <class T>
-struct has_element_type<T, std::void_t<typename T::element_type>>
-    : std::true_type {};
-
-template <class T, bool = has_element_type<T>::value>
-struct indirectly_readable_traits_member_element_type;
-
-template <class T>
-struct indirectly_readable_traits_member_element_type<T, true> {
-  using value_type = typename T::element_type;
-};
-
-template <class T, typename = std::void_t<>>
-struct has_reference : std::false_type {};
-
-template <class T>
-struct has_reference<T, std::void_t<typename T::reference>> : std::true_type {};
-
-template <class T, bool = has_reference<T>::value>
-struct iter_reference;
-
-template <class T>
-struct iter_reference<T, false> {
-  using reference = decltype(*std::declval<T &>());
-};
-
-template <class T>
-struct iter_reference<T, true> {
-  using reference = typename T::reference;
-};
-
-}  // namespace impl
-
-template <class T, class Enable = void>
-struct indirectly_readable_traits {};
-
-template <class T>
-struct indirectly_readable_traits<T *, std::enable_if_t<std::is_object_v<T>>>
-    : impl::indirectly_readable_traits_pointer<T> {};
-
-template <class T>
-struct indirectly_readable_traits<T, std::enable_if_t<std::is_array_v<T>>>
-    : impl::indirectly_readable_traits_array<T> {};
-
-template <class T>
-struct indirectly_readable_traits<
-    T, std::enable_if_t<impl::has_value_type<T>::value>>
-    : impl::indirectly_readable_traits_member_value_type<
-          stdx::remove_cvref_t<T>> {};
-
-template <class T>
-struct indirectly_readable_traits<
-    T, std::enable_if_t<impl::has_element_type<T>::value>>
-    : impl::indirectly_readable_traits_member_element_type<T> {};
-
-template <class T>
-struct indirectly_readable_traits<const T> : indirectly_readable_traits<T> {};
-
-template <class T>
-using iter_value_t =
-    typename indirectly_readable_traits<stdx::remove_cvref_t<T>>::value_type;
-
-template <class T>
-using iter_reference_t =
-    typename impl::iter_reference<stdx::remove_cvref_t<T>>::reference;
-
-}  // namespace stdx
-
-#endif
diff --git a/router/src/harness/include/mysql/harness/stdx/ranges.h b/router/src/harness/include/mysql/harness/stdx/ranges.h
deleted file mode 100644
index c77d75fa524..00000000000
--- a/router/src/harness/include/mysql/harness/stdx/ranges.h
+++ /dev/null
@@ -1,150 +0,0 @@
-/*
-  Copyright (c) 2022, Oracle and/or its affiliates.
-
-  This program is free software; you can redistribute it and/or modify
-  it under the terms of the GNU General Public License, version 2.0,
-  as published by the Free Software Foundation.
-
-  This program is also distributed with certain software (including
-  but not limited to OpenSSL) that is licensed under separate terms,
-  as designated in a particular file or component or in included license
-  documentation.  The authors of MySQL hereby grant you an additional
-  permission to link the program and your derivative works with the
-  separately licensed software that they have included with MySQL.
-
-  This program is distributed in the hope that it will be useful,
-  but WITHOUT ANY WARRANTY; without even the implied warranty of
-  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-  GNU General Public License for more details.
-
-  You should have received a copy of the GNU General Public License
-  along with this program; if not, write to the Free Software
-  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-*/
-
-#ifndef MYSQL_HARNESS_STDX_RANGES_ENUMERATE_H
-#define MYSQL_HARNESS_STDX_RANGES_ENUMERATE_H
-
-//
-// From C++23's P2164
-//
-// http://wg21.link/p2164
-
-#include <iterator>
-#include <tuple>
-#include <utility>  // declval, forward
-
-#include "mysql/harness/stdx/iterator.h"  // iter_reference, iter_value
-
-namespace stdx::ranges {
-
-template <class T>
-using iterator_t = decltype(std::begin(std::declval<T &>()));
-
-template <class R>
-using range_value_t = stdx::iter_value_t<ranges::iterator_t<R>>;
-
-template <class R>
-using range_reference_t = stdx::iter_reference_t<ranges::iterator_t<R>>;
-
-/**
- * enumerate_view over a range.
- *
- * @note only implements the const-iterator parts.
- *
- * @tparam V a range to enumerate
- */
-template <class V>
-class enumerate_view {
- private:
-  using Base = V;
-
-  Base base_ = {};
-
-  template <bool>
-  class iterator;
-
- public:
-  using value_type = stdx::iter_value_t<iterator<true>>;
-
-  constexpr enumerate_view() = default;
-
-  constexpr enumerate_view(V base) : base_(std::forward<Base>(base)) {}
-
-  constexpr auto begin() const { return iterator<true>{std::begin(base_), 0}; }
-
-  constexpr auto end() const { return iterator<true>{std::end(base_), 0}; }
-};
-
-template <class R>
-enumerate_view(R &&) -> enumerate_view<R>;
-
-template <class V>
-template <bool Const>
-class enumerate_view<V>::iterator {
- private:
-  using Base = std::conditional_t<Const, const V, V>;
-
- public:
-  using iterator_category = std::input_iterator_tag;
-
-  using index_type = size_t;
-  using reference = std::tuple<index_type, range_reference_t<Base>>;
-  using value_type = std::tuple<index_type, range_value_t<Base>>;
-
-  constexpr explicit iterator(iterator_t<Base> current, index_type pos)
-      : pos_{pos}, current_{std::move(current)} {}
-
-  constexpr bool operator!=(const iterator &other) const {
-    return current_ != other.current_;
-  }
-
-  constexpr iterator &operator++() {
-    ++pos_;
-    ++current_;
-
-    return *this;
-  }
-
-  constexpr decltype(auto) operator*() const {
-    return reference{pos_, *current_};
-  }
-
- private:
-  index_type pos_;
-
-  iterator_t<Base> current_;
-};
-
-namespace views {
-/*
- * an iterator that wraps an iterable and returns a counter and the
- * deref'ed wrapped iterable.
- *
- * @tparam T a iterable
- *
- * @code
- * for (auto [ndx, vc]: enumerate(std::vector<int>{1, 23, 42})) {
- *   std::cerr << "[" << ndx << "] " << v << "\n";
- * }
- *
- * // [0] 1
- * // [1] 23
- * // [2] 42
- * @endcode
- *
- * modelled after P2164 from C++23, but implemented for C++17 (aka without
- * ranges and views)
- */
-template <class T, class TIter = decltype(std::begin(std::declval<T>())),
-          class = decltype(std::end(std::declval<T>()))>
-constexpr auto enumerate(T &&iterable) {
-  return enumerate_view{std::forward<T>(iterable)};
-}
-}  // namespace views
-}  // namespace stdx::ranges
-
-namespace stdx {
-namespace views = ranges::views;
-}
-#endif
diff --git a/router/src/harness/tests/CMakeLists.txt b/router/src/harness/tests/CMakeLists.txt
index 5659bf478b7..41d99148247 100644
--- a/router/src/harness/tests/CMakeLists.txt
+++ b/router/src/harness/tests/CMakeLists.txt
@@ -135,9 +135,8 @@ SET(TESTS
   test_stdx_bit.cc
   test_stdx_expected.cc
   test_stdx_flags.cc
-  test_stdx_io_file_handle.cc
   test_stdx_monitor.cc
-  test_stdx_ranges.cc
+  test_stdx_io_file_handle.cc
 )
 
 FOREACH(TEST ${TESTS})
diff --git a/router/src/harness/tests/test_stdx_ranges.cc b/router/src/harness/tests/test_stdx_ranges.cc
deleted file mode 100644
index 2c6e70f0623..00000000000
--- a/router/src/harness/tests/test_stdx_ranges.cc
+++ /dev/null
@@ -1,113 +0,0 @@
-/*
-  Copyright (c) 2022, Oracle and/or its affiliates.
-
-  This program is free software; you can redistribute it and/or modify
-  it under the terms of the GNU General Public License, version 2.0,
-  as published by the Free Software Foundation.
-
-  This program is also distributed with certain software (including
-  but not limited to OpenSSL) that is licensed under separate terms,
-  as designated in a particular file or component or in included license
-  documentation.  The authors of MySQL hereby grant you an additional
-  permission to link the program and your derivative works with the
-  separately licensed software that they have included with MySQL.
-
-  This program is distributed in the hope that it will be useful,
-  but WITHOUT ANY WARRANTY; without even the implied warranty of
-  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-  GNU General Public License for more details.
-
-  You should have received a copy of the GNU General Public License
-  along with this program; if not, write to the Free Software
-  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-*/
-
-#include "mysql/harness/stdx/ranges.h"
-
-#include <array>
-#include <forward_list>
-#include <initializer_list>
-#include <iterator>
-#include <list>
-#include <type_traits>
-#include <vector>
-
-#include <gmock/gmock.h>
-
-#include "mysql/harness/stdx/type_traits.h"
-
-using ::testing::ElementsAre;
-using ::testing::FieldsAre;
-
-static_assert(
-    std::is_same_v<
-        stdx::indirectly_readable_traits<std::vector<int>>::value_type, int>);
-static_assert(
-    std::is_same_v<
-        stdx::indirectly_readable_traits<std::array<int, 1>>::value_type, int>);
-static_assert(
-    std::is_same_v<stdx::indirectly_readable_traits<int[]>::value_type, int>);
-
-static_assert(stdx::impl::has_reference<std::list<int>>::value);
-static_assert(std::is_same_v<stdx::iter_reference_t<std::list<int>>,
-                             std::list<int>::reference>);
-static_assert(std::is_same_v<stdx::iter_reference_t<std::list<int> &>,
-                             std::list<int>::reference>);
-static_assert(std::is_same_v<stdx::iter_reference_t<std::list<int> &>,
-                             std::list<int>::reference>);
-static_assert(std::is_same_v<stdx::iter_reference_t<const std::list<int> &>,
-                             std::list<int>::reference>);
-static_assert(std::is_same_v<stdx::ranges::range_reference_t<std::list<int>>,
-                             std::list<int>::reference>);
-static_assert(
-    std::is_same_v<stdx::ranges::range_reference_t<const std::list<int> &>,
-                   std::list<int>::const_reference>);
-static_assert(
-    std::is_same_v<stdx::ranges::range_value_t<const std::list<int> &>, int>);
-static_assert(std::is_same_v<stdx::ranges::range_value_t<std::list<int>>, int>);
-
-template <typename T>
-class EnumerateTest : public ::testing::Test {};
-
-using EnumerateTypes =
-    ::testing::Types<int[], std::vector<int>, std::array<int, 3>,
-                     std::list<int>, std::forward_list<int>,
-                     std::initializer_list<int>>;
-TYPED_TEST_SUITE(EnumerateTest, EnumerateTypes);
-
-TYPED_TEST(EnumerateTest, enumerate_empty) {
-  if constexpr (std::is_same_v<TypeParam, int[]> ||
-                std::is_same_v<TypeParam, std::array<int, 3>>) {
-    GTEST_SKIP() << "can't have zero elements.";
-  } else {
-    TypeParam v{};
-
-    auto it = stdx::views::enumerate(v);
-    EXPECT_FALSE(it.begin() != it.end());
-  }
-}
-
-TYPED_TEST(EnumerateTest, enumerate_ref) {
-  TypeParam v{1, 3, 5};
-
-  EXPECT_THAT(
-      stdx::views::enumerate(v),
-      ::testing::ElementsAre(std::make_tuple(0, 1), std::make_tuple(1, 3),
-                             std::make_tuple(2, 5)));
-}
-
-TYPED_TEST(EnumerateTest, enumerate_some_constref) {
-  if constexpr (std::is_same_v<TypeParam, int[]>) {
-    GTEST_SKIP() << "missing overload";
-  } else {
-    EXPECT_THAT(
-        stdx::views::enumerate(TypeParam{1, 3, 5}),
-        ::testing::ElementsAre(std::make_tuple(0, 1), std::make_tuple(1, 3),
-                               std::make_tuple(2, 5)));
-  }
-}
-
-int main(int argc, char *argv[]) {
-  ::testing::InitGoogleTest(&argc, argv);
-  return RUN_ALL_TESTS();
-}
-- 
2.37.2

