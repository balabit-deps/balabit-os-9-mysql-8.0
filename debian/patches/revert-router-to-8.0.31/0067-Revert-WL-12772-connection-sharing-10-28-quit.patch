From a3b164e6235c7b41251efaa294e7de17a5764804 Mon Sep 17 00:00:00 2001
From: Corey Bryant <corey.bryant@canonical.com>
Date: Fri, 27 Jan 2023 17:19:41 -0500
Subject: [PATCH 67/86] Revert "WL#12772 connection-sharing [10/28] - quit"

This reverts commit 61a8a5b9d6eec27b2841b0c591f49c04ce68de37.
---
 router/src/routing/src/CMakeLists.txt  |   1 -
 router/src/routing/src/classic_quit.cc | 129 -------------------------
 router/src/routing/src/classic_quit.h  |  50 ----------
 3 files changed, 180 deletions(-)
 delete mode 100644 router/src/routing/src/classic_quit.cc
 delete mode 100644 router/src/routing/src/classic_quit.h

diff --git a/router/src/routing/src/CMakeLists.txt b/router/src/routing/src/CMakeLists.txt
index ee2e3ce0b0f..477a4abf66b 100644
--- a/router/src/routing/src/CMakeLists.txt
+++ b/router/src/routing/src/CMakeLists.txt
@@ -55,7 +55,6 @@ ADD_LIBRARY(routing SHARED
   classic_init_schema.cc
   classic_lazy_connect.cc
   classic_query.cc
-  classic_quit.cc
   classic_reset_connection.cc
 
   sql_value.cc
diff --git a/router/src/routing/src/classic_quit.cc b/router/src/routing/src/classic_quit.cc
deleted file mode 100644
index 1b78e910c61..00000000000
--- a/router/src/routing/src/classic_quit.cc
+++ /dev/null
@@ -1,129 +0,0 @@
-/*
-  Copyright (c) 2022, Oracle and/or its affiliates.
-
-  This program is free software; you can redistribute it and/or modify
-  it under the terms of the GNU General Public License, version 2.0,
-  as published by the Free Software Foundation.
-
-  This program is also distributed with certain software (including
-  but not limited to OpenSSL) that is licensed under separate terms,
-  as designated in a particular file or component or in included license
-  documentation.  The authors of MySQL hereby grant you an additional
-  permission to link the program and your derivative works with the
-  separately licensed software that they have included with MySQL.
-
-  This program is distributed in the hope that it will be useful,
-  but WITHOUT ANY WARRANTY; without even the implied warranty of
-  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-  GNU General Public License for more details.
-
-  You should have received a copy of the GNU General Public License
-  along with this program; if not, write to the Free Software
-  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-*/
-
-#include "classic_quit.h"
-
-#include "classic_connection.h"
-#include "classic_forwarder.h"
-#include "classic_frame.h"
-#include "mysql/harness/stdx/expected.h"
-#include "mysql/harness/tls_error.h"
-#include "mysqlrouter/connection_pool.h"
-#include "mysqlrouter/connection_pool_component.h"
-#include "tracer.h"
-
-/**
- * forward the list-fields message flow.
- *
- * Expected overall flow:
- *
- * @code
- * c->r: COM_QUIT
- * alt can not be pooled
- *    r->s: COM_QUIT
- * else
- *    r->s: (add to pool)
- * end
- * c<-r: (close)
- * @endcode
- *
- * It is no error, if there is no server-connection.
- */
-stdx::expected<Processor::Result, std::error_code> QuitProcessor::process() {
-  switch (stage()) {
-    case Stage::Command:
-      return command();
-    case Stage::Done:
-      return Result::Done;
-  }
-
-  harness_assert_this_should_not_execute();
-}
-
-static PooledClassicConnection make_pooled_connection(
-    TlsSwitchableConnection &&other) {
-  auto *classic_protocol_state =
-      dynamic_cast<ClassicProtocolState *>(other.protocol());
-  return {std::move(other.connection()),
-          other.channel()->release_ssl(),
-          classic_protocol_state->server_capabilities(),
-          classic_protocol_state->client_capabilities(),
-          classic_protocol_state->server_greeting(),
-          other.ssl_mode(),
-          classic_protocol_state->username(),
-          classic_protocol_state->schema(),
-          classic_protocol_state->attributes()};
-}
-
-stdx::expected<Processor::Result, std::error_code> QuitProcessor::command() {
-  auto socket_splicer = connection()->socket_splicer();
-  auto src_protocol = connection()->client_protocol();
-  auto src_channel = socket_splicer->client_channel();
-
-  auto msg_res =
-      ClassicFrame::recv_msg<classic_protocol::message::client::Quit>(
-          src_channel, src_protocol);
-  if (!msg_res) return recv_client_failed(msg_res.error());
-
-  trace(Tracer::Event().stage("quit::command"));
-
-  if (!socket_splicer->server_conn().is_open()) {
-    discard_current_msg(src_channel, src_protocol);
-
-    (void)socket_splicer->client_conn().shutdown(
-        net::socket_base::shutdown_send);
-
-    stage(Stage::Done);
-    return Result::Again;
-  }
-
-  // move the connection to the pool.
-  //
-  // the pool will either close it or keep it alive.
-  auto &pools = ConnectionPoolComponent::get_instance();
-
-  if (auto pool = pools.get(ConnectionPoolComponent::default_pool_name())) {
-    discard_current_msg(src_channel, src_protocol);
-
-    pool->add(make_pooled_connection(std::exchange(
-        socket_splicer->server_conn(),
-        TlsSwitchableConnection{nullptr, nullptr,
-                                socket_splicer->server_conn().ssl_mode(),
-                                std::make_unique<ClassicProtocolState>()})));
-
-    // client's expect the server to close first.
-    //
-    // close the sending side and wait until the client closed its side too.
-    (void)socket_splicer->client_conn().shutdown(
-        net::socket_base::shutdown_send);
-
-    stage(Stage::Done);
-
-    return Result::RecvFromClient;
-  } else {
-    stage(Stage::Done);
-
-    return forward_client_to_server();
-  }
-}
diff --git a/router/src/routing/src/classic_quit.h b/router/src/routing/src/classic_quit.h
deleted file mode 100644
index 648c02f0fbd..00000000000
--- a/router/src/routing/src/classic_quit.h
+++ /dev/null
@@ -1,50 +0,0 @@
-/*
-  Copyright (c) 2022, Oracle and/or its affiliates.
-
-  This program is free software; you can redistribute it and/or modify
-  it under the terms of the GNU General Public License, version 2.0,
-  as published by the Free Software Foundation.
-
-  This program is also distributed with certain software (including
-  but not limited to OpenSSL) that is licensed under separate terms,
-  as designated in a particular file or component or in included license
-  documentation.  The authors of MySQL hereby grant you an additional
-  permission to link the program and your derivative works with the
-  separately licensed software that they have included with MySQL.
-
-  This program is distributed in the hope that it will be useful,
-  but WITHOUT ANY WARRANTY; without even the implied warranty of
-  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-  GNU General Public License for more details.
-
-  You should have received a copy of the GNU General Public License
-  along with this program; if not, write to the Free Software
-  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-*/
-
-#ifndef ROUTING_CLASSIC_QUIT_INCLUDED
-#define ROUTING_CLASSIC_QUIT_INCLUDED
-
-#include "processor.h"
-
-class QuitProcessor : public Processor {
- public:
-  using Processor::Processor;
-
-  enum class Stage {
-    Command,
-    Done,
-  };
-
-  stdx::expected<Result, std::error_code> process() override;
-
-  void stage(Stage stage) { stage_ = stage; }
-  Stage stage() const { return stage_; }
-
- private:
-  stdx::expected<Result, std::error_code> command();
-
-  Stage stage_{Stage::Command};
-};
-
-#endif
-- 
2.37.2

