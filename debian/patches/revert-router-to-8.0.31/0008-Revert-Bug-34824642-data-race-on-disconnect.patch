From c02da1fa3a2c402754cec7813dec1b51f7dda94c Mon Sep 17 00:00:00 2001
From: Corey Bryant <corey.bryant@canonical.com>
Date: Fri, 27 Jan 2023 17:02:46 -0500
Subject: [PATCH 08/86] Revert "Bug#34824642 data-race on disconnect"

This reverts commit 905cf2e5949b6acb3febbc3b419252034f2ec469.
---
 .../unreachable_destinations_quarantine.cc    | 10 ++---
 router/src/routing/src/classic_connection.cc  | 18 --------
 router/src/routing/src/classic_connection.h   | 38 +++++------------
 .../src/routing/src/connection_container.cc   |  8 ++--
 router/src/routing/src/connection_container.h |  4 +-
 router/src/routing/src/mysql_routing.cc       |  4 +-
 router/src/routing/src/x_connection.cc        | 17 --------
 router/src/routing/src/x_connection.h         | 42 +++++++------------
 8 files changed, 36 insertions(+), 105 deletions(-)

diff --git a/router/src/destination_status/src/unreachable_destinations_quarantine.cc b/router/src/destination_status/src/unreachable_destinations_quarantine.cc
index 142e7852641..f17a3223862 100644
--- a/router/src/destination_status/src/unreachable_destinations_quarantine.cc
+++ b/router/src/destination_status/src/unreachable_destinations_quarantine.cc
@@ -171,12 +171,8 @@ void UnreachableDestinationsQuarantine::stop_quarantine() {
     std::for_each(std::begin(quarantined_destination_candidates_),
                   std::end(quarantined_destination_candidates_),
                   [](auto &dest) {
-                    auto &io_ctx = dest->server_sock_.get_executor().context();
-
-                    net::dispatch(io_ctx, [dest]() {
-                      dest->server_sock_.cancel();
-                      dest->timer_.cancel();
-                    });
+                    dest->server_sock_.cancel();
+                    dest->timer_.cancel();
                   });
     quarantined_destination_candidates_.clear();
   }
@@ -501,4 +497,4 @@ stdx::expected<void, std::error_code> UnreachableDestinationsQuarantine::
   }
 
   return {};
-}
+}
\ No newline at end of file
diff --git a/router/src/routing/src/classic_connection.cc b/router/src/routing/src/classic_connection.cc
index b7d53947123..d3453ea49bc 100644
--- a/router/src/routing/src/classic_connection.cc
+++ b/router/src/routing/src/classic_connection.cc
@@ -367,24 +367,6 @@ void MysqlRoutingClassicConnection::async_wait_send_server(Function next) {
   });
 }
 
-void MysqlRoutingClassicConnection::disconnect() {
-  disconnect_request([this](auto &req) {
-    auto &io_ctx = socket_splicer()->client_conn().connection()->io_ctx();
-
-    if (io_ctx.stopped()) abort();
-
-    req = true;
-
-    // if disconnect is called from another thread,
-    //
-    // queue the cancel in the connections io-ctx to make it thread-safe.
-    net::dispatch(io_ctx, [this, self = shared_from_this()]() {
-      (void)socket_splicer()->client_conn().cancel();
-      (void)socket_splicer()->server_conn().cancel();
-    });
-  });
-}
-
 // the client didn't send a Greeting before closing the connection.
 //
 // Generate a Greeting to be sent to the server, to ensure the router's IP
diff --git a/router/src/routing/src/classic_connection.h b/router/src/routing/src/classic_connection.h
index 46e4fd8e043..e2797b8c3f3 100644
--- a/router/src/routing/src/classic_connection.h
+++ b/router/src/routing/src/classic_connection.h
@@ -33,7 +33,6 @@
 
 #include "channel.h"
 #include "connection.h"  // MySQLRoutingConnectionBase
-#include "mysql/harness/net_ts/executor.h"
 #include "mysql/harness/net_ts/timer.h"
 #include "mysqlrouter/classic_protocol_message.h"
 #include "mysqlrouter/classic_protocol_session_track.h"
@@ -179,13 +178,8 @@ class ClassicProtocolState : public ProtocolStateBase {
   std::string auth_method_data_;
 };
 
-class MysqlRoutingClassicConnection
-    : public MySQLRoutingConnectionBase,
-      public std::enable_shared_from_this<MysqlRoutingClassicConnection> {
- private:
-  // constructor
-  //
-  // use ::create() instead.
+class MysqlRoutingClassicConnection : public MySQLRoutingConnectionBase {
+ public:
   MysqlRoutingClassicConnection(
       MySQLRoutingContext &context, RouteDestination *route_destination,
       std::unique_ptr<ConnectionBase> client_connection,
@@ -207,25 +201,6 @@ class MysqlRoutingClassicConnection
         connect_timer_{socket_splicer()->client_conn().connection()->io_ctx()} {
   }
 
- public:
-  // create a new shared_ptr<ThisClass>
-  //
-  template <typename... Args>
-  [[nodiscard]] static std::shared_ptr<MysqlRoutingClassicConnection> create(
-      // clang-format off
-      Args &&... args) {
-    // clang-format on
-
-    // can't use make_unique<> here as the constructor is private.
-    return std::shared_ptr<MysqlRoutingClassicConnection>(
-        new MysqlRoutingClassicConnection(std::forward<Args>(args)...));
-  }
-
-  // get a shared-ptr that refers the same 'this'
-  std::shared_ptr<MysqlRoutingClassicConnection> getptr() {
-    return shared_from_this();
-  }
-
   static stdx::expected<size_t, std::error_code> encode_error_packet(
       std::vector<uint8_t> &error_frame, const uint8_t seq_id,
       const classic_protocol::capabilities::value_type caps,
@@ -251,7 +226,14 @@ class MysqlRoutingClassicConnection
     return socket_splicer()->server_conn().endpoint();
   }
 
-  void disconnect() override;
+  void disconnect() override {
+    disconnect_request([this](auto &req) {
+      (void)socket_splicer()->client_conn().cancel();
+      (void)socket_splicer()->server_conn().cancel();
+
+      req = true;
+    });
+  }
 
   void async_run();
 
diff --git a/router/src/routing/src/connection_container.cc b/router/src/routing/src/connection_container.cc
index a8cc6a67cf0..fd59fd6e29c 100644
--- a/router/src/routing/src/connection_container.cc
+++ b/router/src/routing/src/connection_container.cc
@@ -28,7 +28,7 @@
 IMPORT_LOG_FUNCTIONS()
 
 void ConnectionContainer::add_connection(
-    std::shared_ptr<MySQLRoutingConnectionBase> connection) {
+    std::unique_ptr<MySQLRoutingConnectionBase> connection) {
   connections_.put(connection.get(), std::move(connection));
 }
 
@@ -36,7 +36,9 @@ unsigned ConnectionContainer::disconnect(const AllowedNodes &nodes) {
   unsigned number_of_disconnected_connections = 0;
 
   auto mark_to_diconnect_if_not_allowed =
-      [&nodes, &number_of_disconnected_connections](auto &connection) {
+      [&nodes, &number_of_disconnected_connections](
+          std::pair<MySQLRoutingConnectionBase *const,
+                    std::unique_ptr<MySQLRoutingConnectionBase>> &connection) {
         if (std::find_if(nodes.begin(), nodes.end(),
                          [&connection](const auto &node) {
                            return node.address.str() ==
@@ -59,7 +61,7 @@ unsigned ConnectionContainer::disconnect(const AllowedNodes &nodes) {
 
 void ConnectionContainer::disconnect_all() {
   connections_.for_each(
-      [](const auto &connection) { connection.first->disconnect(); });
+      [](auto &connection) { connection.first->disconnect(); });
 }
 
 void ConnectionContainer::remove_connection(
diff --git a/router/src/routing/src/connection_container.h b/router/src/routing/src/connection_container.h
index 76775fec8ce..84c71e2865c 100644
--- a/router/src/routing/src/connection_container.h
+++ b/router/src/routing/src/connection_container.h
@@ -165,7 +165,7 @@ class concurrent_map {
  */
 class ConnectionContainer {
   concurrent_map<MySQLRoutingConnectionBase *,
-                 std::shared_ptr<MySQLRoutingConnectionBase>>
+                 std::unique_ptr<MySQLRoutingConnectionBase>>
       connections_;
 
  public:
@@ -197,7 +197,7 @@ class ConnectionContainer {
    *
    * @param connection The connection to MySQL server
    */
-  void add_connection(std::shared_ptr<MySQLRoutingConnectionBase> connection);
+  void add_connection(std::unique_ptr<MySQLRoutingConnectionBase> connection);
 
   /**
    * @brief Disconnects all connections to servers that are not allowed any
diff --git a/router/src/routing/src/mysql_routing.cc b/router/src/routing/src/mysql_routing.cc
index d391dcc8f5b..a4f9a5621ef 100644
--- a/router/src/routing/src/mysql_routing.cc
+++ b/router/src/routing/src/mysql_routing.cc
@@ -786,7 +786,7 @@ void MySQLRouting::create_connection(
 
   switch (context_.get_protocol()) {
     case BaseProtocol::Type::kClassicProtocol: {
-      auto new_connection = MysqlRoutingClassicConnection::create(
+      auto new_connection = std::make_unique<MysqlRoutingClassicConnection>(
           context_, destinations(),
           std::make_unique<BasicConnection<ClientProtocol>>(
               std::move(client_socket), client_endpoint),
@@ -800,7 +800,7 @@ void MySQLRouting::create_connection(
       net::defer(io_ctx, [new_conn_ptr]() { new_conn_ptr->async_run(); });
     } break;
     case BaseProtocol::Type::kXProtocol: {
-      auto new_connection = MysqlRoutingXConnection::create(
+      auto new_connection = std::make_unique<MysqlRoutingXConnection>(
           context_, destinations(),
           std::make_unique<BasicConnection<ClientProtocol>>(
               std::move(client_socket), client_endpoint),
diff --git a/router/src/routing/src/x_connection.cc b/router/src/routing/src/x_connection.cc
index b3b59babaf8..dd18eb50c01 100644
--- a/router/src/routing/src/x_connection.cc
+++ b/router/src/routing/src/x_connection.cc
@@ -241,23 +241,6 @@ static void discard_current_msg(Channel *src_channel,
   src_protocol->current_msg_type().reset();
 }
 
-void MysqlRoutingXConnection::disconnect() {
-  disconnect_request([this](auto &req) {
-    auto &io_ctx = socket_splicer()->client_conn().connection()->io_ctx();
-
-    if (io_ctx.stopped()) abort();
-
-    req = true;
-
-    net::dispatch(io_ctx, [this, self = shared_from_this()]() {
-      (void)socket_splicer()->client_conn().cancel();
-      (void)socket_splicer()->server_conn().cancel();
-
-      connector().socket().cancel();
-    });
-  });
-}
-
 /**
  * encode a message into a xproto frame.
  *
diff --git a/router/src/routing/src/x_connection.h b/router/src/routing/src/x_connection.h
index 5cc64d80aa1..c1c65137281 100644
--- a/router/src/routing/src/x_connection.h
+++ b/router/src/routing/src/x_connection.h
@@ -56,13 +56,10 @@ class XProtocolState : public ProtocolStateBase {
   std::unique_ptr<Mysqlx::Connection::Capabilities> caps_;
 };
 
-class MysqlRoutingXConnection
-    : public MySQLRoutingConnectionBase,
-      public std::enable_shared_from_this<MysqlRoutingXConnection> {
- private:
-  // constructor
-  //
-  // use ::create() instead.
+class MysqlRoutingXConnection : public MySQLRoutingConnectionBase {
+ public:
+  using connector_type = Connector<std::unique_ptr<ConnectionBase>>;
+
   MysqlRoutingXConnection(
       MySQLRoutingContext &context, RouteDestination *route_destination,
       std::unique_ptr<ConnectionBase> client_connection,
@@ -81,26 +78,6 @@ class MysqlRoutingXConnection
             TlsSwitchableConnection{nullptr, nullptr, context.dest_ssl_mode(),
                                     std::make_unique<XProtocolState>()})} {}
 
- public:
-  using connector_type = Connector<std::unique_ptr<ConnectionBase>>;
-
-  // create a shared_ptr<ThisClass>
-  template <typename... Args>
-  [[nodiscard]] static std::shared_ptr<MysqlRoutingXConnection> create(
-      // clang-format off
-      Args &&... args) {
-    // clang-format on
-
-    // can't use make_unique<> here as the constructor is private.
-    return std::shared_ptr<MysqlRoutingXConnection>(
-        new MysqlRoutingXConnection(std::forward<Args>(args)...));
-  }
-
-  // get a shared-ptr that refers the same 'this'
-  std::shared_ptr<MysqlRoutingXConnection> getptr() {
-    return shared_from_this();
-  }
-
   static stdx::expected<size_t, std::error_code> encode_error_packet(
       std::vector<uint8_t> &error_frame, uint16_t error_code,
       const std::string &msg, const std::string &sql_state = "HY000",
@@ -122,7 +99,16 @@ class MysqlRoutingXConnection
     return socket_splicer()->server_conn().endpoint();
   }
 
-  void disconnect() override;
+  void disconnect() override {
+    disconnect_request([this](auto &req) {
+      (void)socket_splicer()->client_conn().cancel();
+      (void)socket_splicer()->server_conn().cancel();
+
+      connector().socket().cancel();
+
+      req = true;
+    });
+  }
 
   enum class Function {
     kClientRecvCmd,
-- 
2.37.2

