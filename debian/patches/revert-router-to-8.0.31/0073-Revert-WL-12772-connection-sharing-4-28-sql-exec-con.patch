From d2dc8e94ab414fa27fb526971e007cf150225e86 Mon Sep 17 00:00:00 2001
From: Corey Bryant <corey.bryant@canonical.com>
Date: Fri, 27 Jan 2023 17:21:01 -0500
Subject: [PATCH 73/86] Revert "WL#12772 connection-sharing [4/28] -
 sql-exec-context"

This reverts commit 78282beac02b5a3916a7a55a4bbfd1c57ce2044a.
---
 router/src/routing/src/CMakeLists.txt     |   2 -
 router/src/routing/src/sql_exec_context.h | 182 ----------------------
 router/src/routing/src/sql_value.cc       | 102 ------------
 router/src/routing/src/sql_value.h        |  62 --------
 4 files changed, 348 deletions(-)
 delete mode 100644 router/src/routing/src/sql_exec_context.h
 delete mode 100644 router/src/routing/src/sql_value.cc
 delete mode 100644 router/src/routing/src/sql_value.h

diff --git a/router/src/routing/src/CMakeLists.txt b/router/src/routing/src/CMakeLists.txt
index d4c597efa7e..03552f2008b 100644
--- a/router/src/routing/src/CMakeLists.txt
+++ b/router/src/routing/src/CMakeLists.txt
@@ -44,8 +44,6 @@ ADD_LIBRARY(routing SHARED
   x_connection.cc
   connection.cc
   blocked_endpoints.cc
-
-  sql_value.cc
 )
 TARGET_LINK_LIBRARIES(routing
   PUBLIC
diff --git a/router/src/routing/src/sql_exec_context.h b/router/src/routing/src/sql_exec_context.h
deleted file mode 100644
index c1384e26520..00000000000
--- a/router/src/routing/src/sql_exec_context.h
+++ /dev/null
@@ -1,182 +0,0 @@
-/*
-  Copyright (c) 2022, Oracle and/or its affiliates.
-
-  This program is free software; you can redistribute it and/or modify
-  it under the terms of the GNU General Public License, version 2.0,
-  as published by the Free Software Foundation.
-
-  This program is also distributed with certain software (including
-  but not limited to OpenSSL) that is licensed under separate terms,
-  as designated in a particular file or component or in included license
-  documentation.  The authors of MySQL hereby grant you an additional
-  permission to link the program and your derivative works with the
-  separately licensed software that they have included with MySQL.
-
-  This program is distributed in the hope that it will be useful,
-  but WITHOUT ANY WARRANTY; without even the implied warranty of
-  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-  GNU General Public License for more details.
-
-  You should have received a copy of the GNU General Public License
-  along with this program; if not, write to the Free Software
-  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-*/
-
-#ifndef ROUTING_SQL_EXEC_CONTEXT_INCLUDED
-#define ROUTING_SQL_EXEC_CONTEXT_INCLUDED
-
-#include <map>
-#include <optional>
-#include <string>
-#include <vector>
-
-#include "mysql/harness/stdx/expected.h"
-#include "sql_value.h"
-
-/**
- * execution context for SQL.
- *
- * - system-variables
- * - diagnostics area
- */
-class ExecutionContext {
- public:
-  /**
-   * system-variables as returned by the server.
-   *
-   * can be queried from the server with:
-   *
-   * - SELECT @@SESSION.{k}
-   * - SELECT @@LOCAL.{k}
-   *
-   * can be set on the server with:
-   *
-   * - SET k = v;
-   * - SET @@SESSION.k = v;
-   * - SET @@LOCAL.k = v;
-   * - SET SESSION k = v;
-   * - SET LOCAL k = v;
-   *
-   * changes to system-vars on the server are returned via
-   * the sesssion-tracker for system-variables.
-   */
-  class SystemVariables {
-   public:
-    using key_type = std::string;
-    using value_type = Value;  // aka std::optional<std::string>
-
-    /**
-     * set k to v.
-     *
-     * if k doesn't exist in the system-vars yet, it gets inserted.
-     */
-    void set(key_type k, value_type v) {
-      vars_.insert_or_assign(std::move(k), std::move(v));
-    }
-
-    /**
-     * find 'k' in sytem-vars.
-     *
-     * @param k key
-     *
-     * if 'k' does not exist in system-vars, a NULL-like value is returned.
-     * otherwise return the value for the system-var referenced by 'k'
-     *
-     * @returns std::nullopt if key is not found, the found value otherwise.
-     */
-    std::optional<value_type> find(const key_type &k) const {
-      const auto it = vars_.find(k);
-      if (it == vars_.end()) return {std::nullopt};
-
-      return it->second;
-    }
-
-    /**
-     * get 'k' from system-vars.
-     *
-     * @param k key
-     *
-     * if 'k' does not exist in system-vars, a NULL-like value is returned.
-     * otherwise return the value for the system-var referenced by 'k' which may
-     * be NULL-like or a string.
-     *
-     * @returns std::nullopt if key is not found or value is NULL-like, the
-     * found value otherwise
-     */
-    value_type get(const key_type &k) const {
-      const auto res = find(k);
-      if (!res) return {std::nullopt};
-
-      return *res;
-    }
-
-    using iterator = std::map<key_type, value_type>::iterator;
-    using const_iterator = std::map<key_type, value_type>::const_iterator;
-
-    iterator begin() { return vars_.begin(); }
-    const_iterator begin() const { return vars_.begin(); }
-    iterator end() { return vars_.end(); }
-    const_iterator end() const { return vars_.end(); }
-
-    /**
-     * check if their is a no system-var.
-     */
-    bool empty() const { return vars_.empty(); }
-
-   private:
-    std::map<key_type, value_type> vars_;
-  };
-
-  /**
-   * diagnostics area.
-   *
-   * - warnings, errors and notes.
-   *
-   * used by:
-   *
-   * - SHOW WARNINGS
-   * - SHOW ERRORS
-   * - SHOW COUNT(*) WARNINGS
-   * - SHOW COUNT(*) ERRORS
-   * - SELECT @@warning_count
-   * - SELECT @@error_count
-   */
-  class DiagnosticsArea {
-   public:
-    class Warning {
-     public:
-      Warning(std::string level, uint64_t code, std::string msg)
-          : level_(std::move(level)), code_(code), msg_{std::move(msg)} {}
-
-      std::string level() const { return level_; }
-      uint64_t code() const { return code_; }
-      std::string message() const { return msg_; }
-
-     private:
-      std::string level_;
-      uint64_t code_;
-      std::string msg_;
-    };
-
-    std::vector<Warning> &warnings() { return warnings_; }
-    const std::vector<Warning> &warnings() const { return warnings_; }
-
-   private:
-    std::vector<Warning> warnings_;
-  };
-
-  DiagnosticsArea &diagnostics_area() { return diagnostics_area_; }
-
-  const DiagnosticsArea &diagnostics_area() const { return diagnostics_area_; }
-
-  SystemVariables &system_variables() { return system_variables_; }
-
-  const SystemVariables &system_variables() const { return system_variables_; }
-
- private:
-  SystemVariables system_variables_;
-
-  DiagnosticsArea diagnostics_area_;
-};
-
-#endif
diff --git a/router/src/routing/src/sql_value.cc b/router/src/routing/src/sql_value.cc
deleted file mode 100644
index 432cf8b0abb..00000000000
--- a/router/src/routing/src/sql_value.cc
+++ /dev/null
@@ -1,102 +0,0 @@
-/*
-  Copyright (c) 2022, Oracle and/or its affiliates.
-
-  This program is free software; you can redistribute it and/or modify
-  it under the terms of the GNU General Public License, version 2.0,
-  as published by the Free Software Foundation.
-
-  This program is also distributed with certain software (including
-  but not limited to OpenSSL) that is licensed under separate terms,
-  as designated in a particular file or component or in included license
-  documentation.  The authors of MySQL hereby grant you an additional
-  permission to link the program and your derivative works with the
-  separately licensed software that they have included with MySQL.
-
-  This program is distributed in the hope that it will be useful,
-  but WITHOUT ANY WARRANTY; without even the implied warranty of
-  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-  GNU General Public License for more details.
-
-  You should have received a copy of the GNU General Public License
-  along with this program; if not, write to the Free Software
-  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-*/
-
-#include "sql_value.h"
-
-#include <iomanip>  // quoted
-#include <sstream>  // stringstream
-
-namespace {
-constexpr bool is_number(std::string_view s) {
-  bool at_least_one_digit{false};
-  auto cur = s.begin();
-  const auto end = s.end();
-
-  if (cur == end) return false;  // empty.
-
-  if (*cur == '-') ++cur;  // leading minus
-
-  for (; cur != end; ++cur) {
-    auto ch = *cur;
-
-    if (ch == '.') {
-      ++cur;
-      break;
-    } else if (ch < '0' || ch > '9') {
-      // not a digit, fail
-      return false;
-    }
-
-    at_least_one_digit = true;
-  }
-
-  for (; cur != end; ++cur) {
-    auto ch = *cur;
-
-    // not a digit, fail
-    if (ch < '0' || ch > '9') return false;
-
-    at_least_one_digit = true;
-  }
-
-  // at least one digit must have been seen to avoid accepting:
-  //
-  // - "."
-  // - "-"
-  // - "-."
-  //
-  // but  "1.",  ".1",
-  // and "-1.", "-.1" is ok.
-
-  return at_least_one_digit;
-}
-
-static_assert(is_number("1"));
-static_assert(is_number("1."));
-static_assert(is_number("1.1"));
-static_assert(is_number(".1"));
-
-static_assert(is_number("-1"));
-static_assert(is_number("-1."));
-static_assert(is_number("-1.1"));
-static_assert(is_number("-.1"));
-
-static_assert(!is_number(""));
-static_assert(!is_number("."));
-static_assert(!is_number("-"));
-static_assert(!is_number("-."));
-
-}  // namespace
-
-std::string Value::to_string() const {
-  if (!value_.has_value()) return "NULL";
-
-  if (is_number(*value_)) return *value_;
-
-  std::ostringstream oss;
-
-  oss << std::quoted(*value_);
-
-  return oss.str();
-}
diff --git a/router/src/routing/src/sql_value.h b/router/src/routing/src/sql_value.h
deleted file mode 100644
index 50a154f5d01..00000000000
--- a/router/src/routing/src/sql_value.h
+++ /dev/null
@@ -1,62 +0,0 @@
-/*
-  Copyright (c) 2022, Oracle and/or its affiliates.
-
-  This program is free software; you can redistribute it and/or modify
-  it under the terms of the GNU General Public License, version 2.0,
-  as published by the Free Software Foundation.
-
-  This program is also distributed with certain software (including
-  but not limited to OpenSSL) that is licensed under separate terms,
-  as designated in a particular file or component or in included license
-  documentation.  The authors of MySQL hereby grant you an additional
-  permission to link the program and your derivative works with the
-  separately licensed software that they have included with MySQL.
-
-  This program is distributed in the hope that it will be useful,
-  but WITHOUT ANY WARRANTY; without even the implied warranty of
-  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-  GNU General Public License for more details.
-
-  You should have received a copy of the GNU General Public License
-  along with this program; if not, write to the Free Software
-  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-*/
-
-#ifndef ROUTING_SQL_VALUE_INCLUDED
-#define ROUTING_SQL_VALUE_INCLUDED
-
-#include <optional>
-#include <string>
-
-/**
- * a nullable SQL value.
- *
- * For now, supports NULL and strings.
- *
- * Note: In the future, may switch to std::variant<> or
- * similar to cover more types if needed.
- */
-class Value {
- public:
-  using value_type = std::optional<std::string>;
-
-  Value(value_type v) : value_{std::move(v)} {}
-
-  value_type value() const { return value_; }
-
-  /**
-   * "NULL" or the quoted string.
-   */
-  std::string to_string() const;
-
- private:
-  value_type value_;
-};
-
-inline bool operator==(const Value &a, const Value &b) {
-  return a.value() == b.value();
-}
-
-inline bool operator!=(const Value &a, const Value &b) { return !(a == b); }
-
-#endif
-- 
2.37.2

