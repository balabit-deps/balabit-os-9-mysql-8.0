From daa59d1e3f0151e244f6c02e1a5be152f097f762 Mon Sep 17 00:00:00 2001
From: Corey Bryant <corey.bryant@canonical.com>
Date: Fri, 27 Jan 2023 17:04:05 -0500
Subject: [PATCH 19/86] Revert "Bug#34801356 Aborted_clients increases for
 router connections"

This reverts commit fa196c618ea21d9011433371a00dfe028d912f32.
---
 router/src/routing/src/classic_quit.cc        | 68 ++++++-------------
 router/src/routing/src/classic_quit.h         |  2 -
 .../tests/integration/test_routing_direct.cc  | 39 -----------
 3 files changed, 21 insertions(+), 88 deletions(-)

diff --git a/router/src/routing/src/classic_quit.cc b/router/src/routing/src/classic_quit.cc
index 9ef4fb95fe7..1b78e910c61 100644
--- a/router/src/routing/src/classic_quit.cc
+++ b/router/src/routing/src/classic_quit.cc
@@ -54,8 +54,6 @@ stdx::expected<Processor::Result, std::error_code> QuitProcessor::process() {
   switch (stage()) {
     case Stage::Command:
       return command();
-    case Stage::ClientShutdown:
-      return client_shutdown();
     case Stage::Done:
       return Result::Done;
   }
@@ -78,17 +76,6 @@ static PooledClassicConnection make_pooled_connection(
           classic_protocol_state->attributes()};
 }
 
-static TlsSwitchableConnection make_connection_from_pooled(
-    PooledClassicConnection &&other) {
-  return {std::move(other.connection()),
-          nullptr,  // routing_conn
-          other.ssl_mode(), std::make_unique<Channel>(std::move(other.ssl())),
-          std::make_unique<ClassicProtocolState>(
-              other.server_capabilities(), other.client_capabilities(),
-              other.server_greeting(), other.username(), other.schema(),
-              other.attributes())};
-}
-
 stdx::expected<Processor::Result, std::error_code> QuitProcessor::command() {
   auto socket_splicer = connection()->socket_splicer();
   auto src_protocol = connection()->client_protocol();
@@ -104,7 +91,10 @@ stdx::expected<Processor::Result, std::error_code> QuitProcessor::command() {
   if (!socket_splicer->server_conn().is_open()) {
     discard_current_msg(src_channel, src_protocol);
 
-    stage(Stage::ClientShutdown);
+    (void)socket_splicer->client_conn().shutdown(
+        net::socket_base::shutdown_send);
+
+    stage(Stage::Done);
     return Result::Again;
   }
 
@@ -114,42 +104,26 @@ stdx::expected<Processor::Result, std::error_code> QuitProcessor::command() {
   auto &pools = ConnectionPoolComponent::get_instance();
 
   if (auto pool = pools.get(ConnectionPoolComponent::default_pool_name())) {
-    auto is_full_res =
-        pool->add_if_not_full(make_pooled_connection(std::exchange(
-            socket_splicer->server_conn(),
-            TlsSwitchableConnection{
-                nullptr, nullptr, socket_splicer->server_conn().ssl_mode(),
-                std::make_unique<ClassicProtocolState>()})));
-
-    if (!is_full_res) {
-      trace(Tracer::Event().stage("quit::pooled"));
-
-      // the connect was pooled, discard the Quit message.
-      discard_current_msg(src_channel, src_protocol);
-
-      stage(Stage::ClientShutdown);
-      return Result::Again;
-    }
+    discard_current_msg(src_channel, src_protocol);
 
-    socket_splicer->server_conn() =
-        make_connection_from_pooled(std::move(*is_full_res));
-  }
+    pool->add(make_pooled_connection(std::exchange(
+        socket_splicer->server_conn(),
+        TlsSwitchableConnection{nullptr, nullptr,
+                                socket_splicer->server_conn().ssl_mode(),
+                                std::make_unique<ClassicProtocolState>()})));
 
-  stage(Stage::ClientShutdown);
-  return forward_client_to_server();
-}
+    // client's expect the server to close first.
+    //
+    // close the sending side and wait until the client closed its side too.
+    (void)socket_splicer->client_conn().shutdown(
+        net::socket_base::shutdown_send);
 
-stdx::expected<Processor::Result, std::error_code>
-QuitProcessor::client_shutdown() {
-  auto socket_splicer = connection()->socket_splicer();
+    stage(Stage::Done);
 
-  // client's expect the server to close first.
-  //
-  // close the sending side and wait until the client closed its side too.
-  (void)socket_splicer->client_conn().shutdown(net::socket_base::shutdown_send);
-
-  stage(Stage::Done);
+    return Result::RecvFromClient;
+  } else {
+    stage(Stage::Done);
 
-  // wait for the client to send data ... which should be a connection close.
-  return Result::RecvFromClient;
+    return forward_client_to_server();
+  }
 }
diff --git a/router/src/routing/src/classic_quit.h b/router/src/routing/src/classic_quit.h
index 13ea767b95c..648c02f0fbd 100644
--- a/router/src/routing/src/classic_quit.h
+++ b/router/src/routing/src/classic_quit.h
@@ -33,7 +33,6 @@ class QuitProcessor : public Processor {
 
   enum class Stage {
     Command,
-    ClientShutdown,
     Done,
   };
 
@@ -44,7 +43,6 @@ class QuitProcessor : public Processor {
 
  private:
   stdx::expected<Result, std::error_code> command();
-  stdx::expected<Result, std::error_code> client_shutdown();
 
   Stage stage_{Stage::Command};
 };
diff --git a/router/tests/integration/test_routing_direct.cc b/router/tests/integration/test_routing_direct.cc
index fc21d4fcd02..13e4305bed2 100644
--- a/router/tests/integration/test_routing_direct.cc
+++ b/router/tests/integration/test_routing_direct.cc
@@ -3960,45 +3960,6 @@ TEST_P(ConnectionTest, classic_protocol_unknown_command) {
   ASSERT_NO_ERROR(cli.ping());
 }
 
-/**
- * check that server doesn't report "Aborted Clients".
- */
-TEST_P(ConnectionTest, classic_protocol_quit_no_aborted_connections) {
-  SCOPED_TRACE("// connecting to server directly");
-  auto admin_res = shared_servers()[0]->admin_cli();
-  ASSERT_NO_ERROR(admin_res);
-
-  auto admin_cli = std::move(*admin_res);
-
-  auto before_res = query_one_result(admin_cli,
-                                     "SELECT VARIABLE_VALUE "
-                                     "FROM performance_schema.global_status "
-                                     "WHERE variable_name = 'Aborted_clients'");
-  ASSERT_NO_ERROR(before_res);
-
-  SCOPED_TRACE("// connecting to server through router");
-  {
-    MysqlClient cli;
-
-    cli.username("root");
-    cli.password("");
-
-    ASSERT_NO_ERROR(cli.connect(shared_router()->host(),
-                                shared_router()->port(GetParam())));
-
-    // and close again.
-  }
-
-  auto after_res = query_one_result(admin_cli,
-                                    "SELECT VARIABLE_VALUE "
-                                    "FROM performance_schema.global_status "
-                                    "WHERE variable_name = 'Aborted_clients'");
-  ASSERT_NO_ERROR(after_res);
-
-  SCOPED_TRACE("// expect no new aborted clients");
-  EXPECT_EQ((*before_res)[0][0], (*after_res)[0][0]);
-}
-
 INSTANTIATE_TEST_SUITE_P(Spec, ConnectionTest,
                          ::testing::ValuesIn(connection_params),
                          [](auto &info) {
-- 
2.37.2

