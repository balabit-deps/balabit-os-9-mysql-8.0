From 0e0a792038a9235e9ed8b6eac60aa74f3bda6163 Mon Sep 17 00:00:00 2001
From: Corey Bryant <corey.bryant@canonical.com>
Date: Fri, 27 Jan 2023 17:22:17 -0500
Subject: [PATCH 84/86] Revert "Bug#34566244 fixed range-loop-bind-reference
 warnings"

This reverts commit 0fe0413b93f05694b778ce01a58358bc791ea580.
---
 cmake/maintainer.cmake                        |  2 +-
 .../include/mysql/harness/access_rights.h     |  9 ++---
 router/src/harness/src/access_rights.cc       |  8 ++---
 router/src/routing/tests/mysql_client.h       | 36 +++++--------------
 4 files changed, 16 insertions(+), 39 deletions(-)

diff --git a/cmake/maintainer.cmake b/cmake/maintainer.cmake
index 21d3378be8c..7ca2bbbc3cd 100644
--- a/cmake/maintainer.cmake
+++ b/cmake/maintainer.cmake
@@ -117,7 +117,6 @@ IF(MY_COMPILER_IS_CLANG)
   STRING_APPEND(MY_CXX_WARNING_FLAGS " -Wheader-hygiene")
   STRING_APPEND(MY_CXX_WARNING_FLAGS " -Wnon-virtual-dtor")
   STRING_APPEND(MY_CXX_WARNING_FLAGS " -Wundefined-reinterpret-cast")
-  STRING_APPEND(MY_CXX_WARNING_FLAGS " -Wrange-loop-analysis")
 
   MY_ADD_CXX_WARNING_FLAG("Winconsistent-missing-destructor-override")
   MY_ADD_CXX_WARNING_FLAG("Winconsistent-missing-override")
@@ -155,6 +154,7 @@ IF(MY_COMPILER_IS_CLANG)
   # -Wold-style-cast
   # -Wpadded
   # -Wpedantic
+  # -Wrange-loop-analysis
   # -Wredundant-parens
   # -Wreserved-id-macro
   # -Wshadow
diff --git a/router/src/harness/include/mysql/harness/access_rights.h b/router/src/harness/include/mysql/harness/access_rights.h
index bfb1608315a..ebf2c13e2fc 100644
--- a/router/src/harness/include/mysql/harness/access_rights.h
+++ b/router/src/harness/include/mysql/harness/access_rights.h
@@ -247,20 +247,17 @@ class HARNESS_EXPORT Acl {
 
   class HARNESS_EXPORT iterator {
    public:
-    using value_type = Ace;
-    using reference = value_type &;
+    using reference_type = Ace;
 
     iterator(ACL *acl, size_t ndx) : acl_{acl}, ndx_{ndx} {}
 
-    reference operator*();
+    reference_type operator*();
     iterator &operator++();
-    bool operator!=(const iterator &other) const;
+    bool operator!=(const iterator &other);
 
    private:
     ACL *acl_;
     size_t ndx_;
-
-    value_type ace_{nullptr};
   };
 
   iterator begin() const { return {acl_, 0}; }
diff --git a/router/src/harness/src/access_rights.cc b/router/src/harness/src/access_rights.cc
index 15bd128cedb..6454ba77226 100644
--- a/router/src/harness/src/access_rights.cc
+++ b/router/src/harness/src/access_rights.cc
@@ -180,16 +180,14 @@ std::string Sid::to_string() const {
   return sid_out;
 }
 
-Acl::iterator::reference Acl::iterator::operator*() {
+Acl::iterator::reference_type Acl::iterator::operator*() {
   LPVOID ace = nullptr;
 
   if (GetAce(acl_, ndx_, &ace) == FALSE) {
     throw std::system_error(last_error_code());
   }
 
-  ace_ = static_cast<ACE_HEADER *>(ace);
-
-  return ace_;
+  return {static_cast<ACE_HEADER *>(ace)};
 }
 
 Acl::iterator &Acl::iterator::operator++() {
@@ -198,7 +196,7 @@ Acl::iterator &Acl::iterator::operator++() {
   return *this;
 }
 
-bool Acl::iterator::operator!=(const Acl::iterator &other) const {
+bool Acl::iterator::operator!=(const Acl::iterator &other) {
   return !(acl_ == other.acl_ && ndx_ == other.ndx_);
 }
 
diff --git a/router/src/routing/tests/mysql_client.h b/router/src/routing/tests/mysql_client.h
index 8180ef81c24..3b73de3f6b4 100644
--- a/router/src/routing/tests/mysql_client.h
+++ b/router/src/routing/tests/mysql_client.h
@@ -528,20 +528,18 @@ class MysqlClient {
         }
       }
 
-      // iterator over rows
       class Iterator {
        public:
         using value_type = MYSQL_ROW;
-        using reference = value_type &;
 
-        Iterator(MYSQL_RES *res)
-            : res_{res},
-              current_row_{res_ != nullptr ? mysql_fetch_row(res_) : nullptr} {
+        Iterator(MYSQL_RES *res) : res_{res} {
+          if (res_ == nullptr) return;
+
+          current_row_ = mysql_fetch_row(res_);
           if (current_row_ == nullptr) {
             res_ = nullptr;
           }
         }
-
         Iterator &operator++() {
           current_row_ = mysql_fetch_row(res_);
           if (current_row_ == nullptr) {
@@ -550,16 +548,9 @@ class MysqlClient {
 
           return *this;
         }
+        bool operator!=(const Iterator &other) { return res_ != other.res_; }
 
-        bool operator==(const Iterator &other) const {
-          return res_ == other.res_;
-        }
-
-        bool operator!=(const Iterator &other) const {
-          return !(*this == other);
-        }
-
-        reference operator*() { return current_row_; }
+        value_type operator*() { return current_row_; }
 
        private:
         MYSQL_RES *res_;
@@ -594,9 +585,7 @@ class MysqlClient {
      public:
       class Iterator {
        public:
-        using value_type = ResultSet;
-        using pointer = value_type *;
-        using reference = value_type &;
+        using reference = ResultSet;
 
         Iterator(MYSQL *m) : m_{m} {}
         Iterator &operator++() {
@@ -606,27 +595,20 @@ class MysqlClient {
 
           return *this;
         }
+        bool operator!=(const Iterator &other) { return m_ != other.m_; }
 
-        bool operator!=(const Iterator &other) const { return m_ != other.m_; }
-
-        reference operator*() { return res_; }
-        pointer operator->() { return &res_; }
+        reference operator*() { return {m_}; }
 
        private:
         MYSQL *m_;
-
-        value_type res_{m_};
       };
 
       using iterator = Iterator;
-      using const_iterator = Iterator;
 
       Result(MYSQL *m) : m_{m} {}
 
       iterator begin() { return {m_}; }
-      const_iterator begin() const { return {m_}; }
       iterator end() { return {nullptr}; }
-      const_iterator end() const { return {nullptr}; }
 
      private:
       MYSQL *m_;
-- 
2.37.2

