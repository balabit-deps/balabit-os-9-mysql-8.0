From 06441c1a478c2b9bc3c4796b0f4d47f1c590dd26 Mon Sep 17 00:00:00 2001
From: Corey Bryant <corey.bryant@canonical.com>
Date: Fri, 27 Jan 2023 17:19:14 -0500
Subject: [PATCH 62/86] Revert "WL#12772 connection-sharing [15/28] - kill"

This reverts commit 47b2599e3ba48cad61832d7dbb783301838cd04b.
---
 router/src/routing/src/CMakeLists.txt  |   1 -
 router/src/routing/src/classic_kill.cc | 151 -------------------------
 router/src/routing/src/classic_kill.h  |  60 ----------
 3 files changed, 212 deletions(-)
 delete mode 100644 router/src/routing/src/classic_kill.cc
 delete mode 100644 router/src/routing/src/classic_kill.h

diff --git a/router/src/routing/src/CMakeLists.txt b/router/src/routing/src/CMakeLists.txt
index b6f148f2e03..667b45870a9 100644
--- a/router/src/routing/src/CMakeLists.txt
+++ b/router/src/routing/src/CMakeLists.txt
@@ -55,7 +55,6 @@ ADD_LIBRARY(routing SHARED
   classic_frame.cc
   classic_greeting.cc
   classic_init_schema.cc
-  classic_kill.cc
   classic_lazy_connect.cc
   classic_ping.cc
   classic_query.cc
diff --git a/router/src/routing/src/classic_kill.cc b/router/src/routing/src/classic_kill.cc
deleted file mode 100644
index f30a8836683..00000000000
--- a/router/src/routing/src/classic_kill.cc
+++ /dev/null
@@ -1,151 +0,0 @@
-/*
-  Copyright (c) 2022, Oracle and/or its affiliates.
-
-  This program is free software; you can redistribute it and/or modify
-  it under the terms of the GNU General Public License, version 2.0,
-  as published by the Free Software Foundation.
-
-  This program is also distributed with certain software (including
-  but not limited to OpenSSL) that is licensed under separate terms,
-  as designated in a particular file or component or in included license
-  documentation.  The authors of MySQL hereby grant you an additional
-  permission to link the program and your derivative works with the
-  separately licensed software that they have included with MySQL.
-
-  This program is distributed in the hope that it will be useful,
-  but WITHOUT ANY WARRANTY; without even the implied warranty of
-  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-  GNU General Public License for more details.
-
-  You should have received a copy of the GNU General Public License
-  along with this program; if not, write to the Free Software
-  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-*/
-
-#include "classic_kill.h"
-
-#include "classic_connection.h"
-#include "classic_forwarder.h"
-#include "classic_frame.h"
-#include "classic_lazy_connect.h"
-#include "mysql/harness/stdx/expected.h"
-#include "mysql/harness/tls_error.h"
-#include "tracer.h"
-
-stdx::expected<Processor::Result, std::error_code> KillForwarder::process() {
-  switch (stage()) {
-    case Stage::Command:
-      return command();
-    case Stage::Connect:
-      return connect();
-    case Stage::Connected:
-      return connected();
-    case Stage::Response:
-      return response();
-    case Stage::Ok:
-      return ok();
-    case Stage::Error:
-      return error();
-    case Stage::Done:
-      return Result::Done;
-  }
-
-  harness_assert_this_should_not_execute();
-}
-
-stdx::expected<Processor::Result, std::error_code> KillForwarder::command() {
-  trace(Tracer::Event().stage("kill::command"));
-
-  auto &server_conn = connection()->socket_splicer()->server_conn();
-  if (!server_conn.is_open()) {
-    stage(Stage::Connect);
-    return Result::Again;
-  } else {
-    stage(Stage::Response);
-    return forward_client_to_server();
-  }
-}
-
-stdx::expected<Processor::Result, std::error_code> KillForwarder::connect() {
-  trace(Tracer::Event().stage("kill::connect"));
-
-  stage(Stage::Connected);
-
-  connection()->push_processor(std::make_unique<LazyConnector>(
-      connection(), false /* not in handshake */));
-
-  return Result::Again;
-}
-
-stdx::expected<Processor::Result, std::error_code> KillForwarder::connected() {
-  auto &server_conn = connection()->socket_splicer()->server_conn();
-  if (!server_conn.is_open()) {
-    // Connector sent an server::Error already.
-    auto *socket_splicer = connection()->socket_splicer();
-    auto src_channel = socket_splicer->client_channel();
-    auto src_protocol = connection()->client_protocol();
-
-    // take the client::command from the connection.
-    auto recv_res =
-        ClassicFrame::ensure_has_full_frame(src_channel, src_protocol);
-    if (!recv_res) return recv_client_failed(recv_res.error());
-
-    discard_current_msg(src_channel, src_protocol);
-
-    trace(Tracer::Event().stage("kill::error"));
-
-    stage(Stage::Done);
-    return Result::Again;
-  }
-
-  trace(Tracer::Event().stage("kill::connected"));
-
-  stage(Stage::Response);
-  return forward_client_to_server();
-}
-
-stdx::expected<Processor::Result, std::error_code> KillForwarder::response() {
-  auto *socket_splicer = connection()->socket_splicer();
-  auto src_channel = socket_splicer->server_channel();
-  auto src_protocol = connection()->server_protocol();
-
-  auto read_res =
-      ClassicFrame::ensure_has_msg_prefix(src_channel, src_protocol);
-  if (!read_res) return recv_server_failed(read_res.error());
-
-  trace(Tracer::Event().stage("kill::response"));
-
-  const uint8_t msg_type = src_protocol->current_msg_type().value();
-
-  enum class Msg {
-    Ok = ClassicFrame::cmd_byte<classic_protocol::message::server::Ok>(),
-    Error = ClassicFrame::cmd_byte<classic_protocol::message::server::Error>(),
-  };
-
-  switch (Msg{msg_type}) {
-    case Msg::Ok:
-      stage(Stage::Ok);
-      return Result::Again;
-    case Msg::Error:
-      stage(Stage::Error);
-      return Result::Again;
-  }
-
-  return stdx::make_unexpected(make_error_code(std::errc::bad_message));
-}
-
-stdx::expected<Processor::Result, std::error_code> KillForwarder::ok() {
-  trace(Tracer::Event().stage("kill::ok"));
-
-  stage(Stage::Done);
-
-  return forward_server_to_client();
-}
-
-stdx::expected<Processor::Result, std::error_code> KillForwarder::error() {
-  trace(Tracer::Event().stage("kill::error"));
-
-  stage(Stage::Done);
-
-  return forward_server_to_client();
-}
diff --git a/router/src/routing/src/classic_kill.h b/router/src/routing/src/classic_kill.h
deleted file mode 100644
index ae1599a2b36..00000000000
--- a/router/src/routing/src/classic_kill.h
+++ /dev/null
@@ -1,60 +0,0 @@
-/*
-  Copyright (c) 2022, Oracle and/or its affiliates.
-
-  This program is free software; you can redistribute it and/or modify
-  it under the terms of the GNU General Public License, version 2.0,
-  as published by the Free Software Foundation.
-
-  This program is also distributed with certain software (including
-  but not limited to OpenSSL) that is licensed under separate terms,
-  as designated in a particular file or component or in included license
-  documentation.  The authors of MySQL hereby grant you an additional
-  permission to link the program and your derivative works with the
-  separately licensed software that they have included with MySQL.
-
-  This program is distributed in the hope that it will be useful,
-  but WITHOUT ANY WARRANTY; without even the implied warranty of
-  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-  GNU General Public License for more details.
-
-  You should have received a copy of the GNU General Public License
-  along with this program; if not, write to the Free Software
-  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-*/
-
-#ifndef ROUTING_CLASSIC_KILL_INCLUDED
-#define ROUTING_CLASSIC_KILL_INCLUDED
-
-#include "processor.h"
-
-class KillForwarder : public Processor {
- public:
-  using Processor::Processor;
-
-  enum class Stage {
-    Command,
-    Connect,
-    Connected,
-    Response,
-    Ok,
-    Error,
-    Done,
-  };
-
-  stdx::expected<Result, std::error_code> process() override;
-
-  void stage(Stage stage) { stage_ = stage; }
-  Stage stage() const { return stage_; }
-
- private:
-  stdx::expected<Result, std::error_code> command();
-  stdx::expected<Result, std::error_code> connect();
-  stdx::expected<Result, std::error_code> connected();
-  stdx::expected<Result, std::error_code> response();
-  stdx::expected<Result, std::error_code> ok();
-  stdx::expected<Result, std::error_code> error();
-
-  Stage stage_{Stage::Command};
-};
-
-#endif
-- 
2.37.2

